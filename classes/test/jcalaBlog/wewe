`define	reset	sim.I_FAKE_CPU_0.reset
`define	seq		sim.I_FAKE_CPU_0.seq
`include "FAKE_CPU.v"
`include "MONITOR.v"
`include "SEQ_DETECTOR.v"
`include "SEQ_DETECTOR_G.v"
`timescale 1s/1ms

module	sim;
reg				SYSCLK;
wire			RST_B;
wire			IN_VALID;
wire	[1:0]	MODE;
wire	[3:0]	DATA_IN;
wire			OUT_VALID;
wire	[3:0]	DATA_OUT;
wire			OUT_VALID_TEMP;
wire	[3:0]	DATA_OUT_TEMP;
q
initial   SYSCLK = 1'b0;

always #2	SYSCLK	= ~SYSCLK;

initial
begin
  $display("============= TEST BEGIN =============");
  `reset;
  // seq(IN_VALID, MODE, DATA_IN)
  `seq(0,0,0);
  `seq(0,0,2);
  `seq(0,0,3);
  `seq(0,0,4);
  `seq(0,0,5);
  `seq(0,0,0);
  `seq(1,0,6);
  `seq(1,0,7);
  `seq(1,0,8);
  `seq(1,0,9);
  `seq(1,0,0);
  `seq(0,0,0);
  `seq(1,1,6);
  `seq(1,1,5);
  `seq(1,1,4);
  `seq(1,1,3);
  `seq(1,1,0);
  `seq(0,1,0);
  `seq(1,2,11);
  `seq(1,2,11);
  `seq(1,2,11);
  `seq(1,2,11);
  `seq(1,2,0);
  `seq(0,2,0);
  `seq(1,0,4);
  `seq(1,0,5);
  `seq(1,0,6);
  `seq(1,1,7);
  `seq(1,1,6);
  `seq(1,1,5);
  `seq(1,1,4);
  `seq(1,0,5);
  `seq(1,0,6);
  `seq(1,0,7);
  `seq(1,0,8);
  `seq(1,2,8);
  `seq(1,2,8);
  `seq(1,2,8);
  `seq(1,2,8);
  `seq(0,0,0);
  `seq(1,0,0);
  `seq(0,0,1);
  `seq(1,0,1);
  `seq(0,0,2);
  `seq(0,0,3);
  `seq(1,0,2);
  `seq(0,2,2);
  `seq(0,1,3);
  `seq(1,0,3);
  `seq(0,1,1);
  `seq(0,2,2);
  `seq(1,0,4);
  `seq(1,3,0);
  `seq(1,0,0);
  `seq(1,3,1);
  `seq(1,0,1);
  `seq(1,3,2);
  `seq(1,3,3);
  `seq(1,0,2);
  `seq(1,3,2);
  `seq(1,3,3);
  `seq(1,0,3);
  `seq(1,0,1);

if(sim.I_MONITOR_0.error == 1) 
  begin
    $display("=============Fail=============");
    $finish;
  end
else 
  begin 
    $display("=============Pass=============");
    $finish;
  end
end

//==============================================================================
//Instance DUT
//==============================================================================
FAKE_CPU I_FAKE_CPU_0(
  .SYSCLK (SYSCLK),
  .RST_B (RST_B),
  .DATA_IN (DATA_IN),
  .MODE (MODE),
  .IN_VALID (IN_VALID)
);

SEQ_DETECTOR_TEMP I_SEQ_DETECTOR_TEMP_0(
  .SYSCLK (SYSCLK),
  .RST_B (RST_B),
  .IN_VALID (IN_VALID),
  .MODE (MODE),
  .DATA_IN (DATA_IN),
  .OUT_VALID (OUT_VALID_TEMP),	
  .DATA_OUT (DATA_OUT_TEMP) 
);

SEQ_DETECTOR I_SEQ_DETECTOR_0(
  .SYSCLK	(SYSCLK),
  .RST_B (RST_B),
  .IN_VALID	(IN_VALID),
  .MODE	(MODE),
  .DATA_IN (DATA_IN),
  .OUT_VALID (OUT_VALID),	
  .DATA_OUT (DATA_OUT)    
);

MONITOR	I_MONITOR_0(
	.SYSCLK	(SYSCLK),
	.RST_B (RST_B),	
	.OUT_VALID (OUT_VALID),
	.OUT_VALID_TEMP (OUT_VALID_TEMP),	
	.DATA_OUT	(DATA_OUT),
	.DATA_OUT_TEMP	(DATA_OUT_TEMP)
);
endmodule